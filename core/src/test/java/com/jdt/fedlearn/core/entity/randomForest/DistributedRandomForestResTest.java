package com.jdt.fedlearn.core.entity.randomForest;

import com.jdt.fedlearn.core.entity.ClientInfo;
import com.jdt.fedlearn.core.entity.Message;
import com.jdt.fedlearn.core.entity.serialize.JsonSerializer;
import com.jdt.fedlearn.core.entity.serialize.Serializer;
import org.testng.Assert;
import org.testng.annotations.Test;

import java.util.HashMap;

import static org.testng.Assert.*;

public class DistributedRandomForestResTest {

    @Test
    public void jsonDeserialize(){
        String ori = "{\"CLASS\":\"com.jdt.fedlearn.core.entity.randomForest.DistributedRandomForestRes\",\"DATA\":{\"client\":{\"port\":0,\"uniqueId\":0},\"isActive\":true,\"body\":\"Cu8DCuwDCvMBCvAB5/+MkNdVVkAJYe5lbJBWQIc1i7/skVVA+fFCyodwVkCW5jzWbvVVQPh5S/h6JldAe327d4TfVkBl1bW68hFXQJ/uee2jkVdAq7mbdeEfVkBFFYHSyMpWQJFw4y00IFZAUIXPPlGMVkBXVbOWGA9XQNeiQAs8UFZAfYSHCBuTVkAHy/5FuMlWQG1E22tu9VZAOPfV63rDV0DlHDTJhylXQA3KQj/Om1dAiEROjrVIV0A3JdtO1/9WQDFRh+wN/VZAZRrnbS02V0DmwVsWIqFXQPY/+NEYw1dAA3U2NnRdWECSm2ZTZwtXQHLsH5kPvVdACvMBCvABN9MZYe0zVkD5crIO5axWQB0t94MItlVAMOKInBx9VkACupDV4/tVQBEsAf1FAFZA7+wGCghMVkBRVj0DyiVXQB17jjU53VVA+zHAiFc7VkCSv8gs7sdWQFU3OdgPQVZA+RrBdBabV0BuHtUh74hWQKtCwzHdQVdAEI421f9JV0DQ9b7jTUlXQPBQ/lCI6VZASzRNlED4VkDw6FKM5QFYQMrgWD1DUldA4MBJ0nM+V0AlYJ1VBttXQGkygrZ9G1hAm4hzLgdtV0DvMI1ar39XQFf+1ITYxldAqHxrqhdTV0DVuJoIO6JWQGr6JXqrnldACu8DCuwDCvMBCvABTO8PckKnVkCTSwP32HVWQMlPQnJ8rVZAJH2MKFohVkAvbcxQkL1VQA5+mEMFuldA8EF/11oAV0BhTYRqpEdXQNUBsJ49qlZAn2cYaB8aVkD+PrTkDU5WQAK7U3tDmFZA1+CH+ng0VkC3nFW7ir9WQD+Wq17SnFZAnHXHSFJpVkDzO8K/dcNWQP30tePhPVdA6KX/nsfiV0CmNDuCiWpXQMpHb3YnBFdAUKcSdIBRV0DzzwPfFcBWQJHU4CFCIldAF2HYjMAvV0Dxm2WB4aZXQHCrGZy351dAJ4C2PR9fV0DWR9aJmaxXQE6SjWb+JVdACvMBCvABjSCTjIxRVkAFUkyN4mFWQLbm9rV1wVVA2T4jcn49VkDn7ZSIfjFWQPBcIOOYDVZAYEn69G0QVkBSZBEaEUZWQMkoR2Ci8VVAQPPmivUuV0BFuwD8pXRWQMrFfqBbBVdA7VHUVFAnV0BjUr+HqvBWQMPGfU2t4lZAqCP1z7GrVkCnySTukthXQNNf3aLB/1ZAN2oE2tt0V0DhTth1Mx9XQFOWyqB6jldARUAXma35VkAID4VaaCdYQBn9tPsKAlhASIX1aTsDV0AGy7hbZMBXQD23XHkblFdAGx3yJrW8V0BnUyuSNrxWQMFXtwV/Y1dA\",\"sampleId\":null,\"treeId\":-1,\"extraInfo\":\"0|1||[0, 1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 62, 63, 64, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 152, 153, 154, 156, 157, 159, 160, 162, 163, 164, 165, 166, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 201, 205, 206, 208, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 253, 256, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289]|[1, 2, 3, 4, 8, 9, 10, 11, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 110, 111, 115, 116, 117, 118, 119, 120, 121, 126, 128, 129, 130, 131, 132, 133, 135, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 216, 217, 218, 220, 223, 224, 225, 228, 230, 231, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 267, 268, 270, 272, 274, 275, 276, 277, 278, 281, 282, 285, 287]\"}}";
        Serializer serializer = new JsonSerializer();
        Message message = serializer.deserialize(ori);
        DistributedRandomForestRes distributedRandomForestRes = (DistributedRandomForestRes)message;
        Assert.assertEquals(distributedRandomForestRes.getBody(), "Cu8DCuwDCvMBCvAB5/+MkNdVVkAJYe5lbJBWQIc1i7/skVVA+fFCyodwVkCW5jzWbvVVQPh5S/h6JldAe327d4TfVkBl1bW68hFXQJ/uee2jkVdAq7mbdeEfVkBFFYHSyMpWQJFw4y00IFZAUIXPPlGMVkBXVbOWGA9XQNeiQAs8UFZAfYSHCBuTVkAHy/5FuMlWQG1E22tu9VZAOPfV63rDV0DlHDTJhylXQA3KQj/Om1dAiEROjrVIV0A3JdtO1/9WQDFRh+wN/VZAZRrnbS02V0DmwVsWIqFXQPY/+NEYw1dAA3U2NnRdWECSm2ZTZwtXQHLsH5kPvVdACvMBCvABN9MZYe0zVkD5crIO5axWQB0t94MItlVAMOKInBx9VkACupDV4/tVQBEsAf1FAFZA7+wGCghMVkBRVj0DyiVXQB17jjU53VVA+zHAiFc7VkCSv8gs7sdWQFU3OdgPQVZA+RrBdBabV0BuHtUh74hWQKtCwzHdQVdAEI421f9JV0DQ9b7jTUlXQPBQ/lCI6VZASzRNlED4VkDw6FKM5QFYQMrgWD1DUldA4MBJ0nM+V0AlYJ1VBttXQGkygrZ9G1hAm4hzLgdtV0DvMI1ar39XQFf+1ITYxldAqHxrqhdTV0DVuJoIO6JWQGr6JXqrnldACu8DCuwDCvMBCvABTO8PckKnVkCTSwP32HVWQMlPQnJ8rVZAJH2MKFohVkAvbcxQkL1VQA5+mEMFuldA8EF/11oAV0BhTYRqpEdXQNUBsJ49qlZAn2cYaB8aVkD+PrTkDU5WQAK7U3tDmFZA1+CH+ng0VkC3nFW7ir9WQD+Wq17SnFZAnHXHSFJpVkDzO8K/dcNWQP30tePhPVdA6KX/nsfiV0CmNDuCiWpXQMpHb3YnBFdAUKcSdIBRV0DzzwPfFcBWQJHU4CFCIldAF2HYjMAvV0Dxm2WB4aZXQHCrGZy351dAJ4C2PR9fV0DWR9aJmaxXQE6SjWb+JVdACvMBCvABjSCTjIxRVkAFUkyN4mFWQLbm9rV1wVVA2T4jcn49VkDn7ZSIfjFWQPBcIOOYDVZAYEn69G0QVkBSZBEaEUZWQMkoR2Ci8VVAQPPmivUuV0BFuwD8pXRWQMrFfqBbBVdA7VHUVFAnV0BjUr+HqvBWQMPGfU2t4lZAqCP1z7GrVkCnySTukthXQNNf3aLB/1ZAN2oE2tt0V0DhTth1Mx9XQFOWyqB6jldARUAXma35VkAID4VaaCdYQBn9tPsKAlhASIX1aTsDV0AGy7hbZMBXQD23XHkblFdAGx3yJrW8V0BnUyuSNrxWQMFXtwV/Y1dA");
        Assert.assertEquals(distributedRandomForestRes.getClient(), new ClientInfo());
        Assert.assertEquals(distributedRandomForestRes.getIsActive(), true);
        Assert.assertEquals(distributedRandomForestRes.getSampleId(), null);
        Assert.assertEquals(distributedRandomForestRes.getExtraInfo(), "0|1||[0, 1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 62, 63, 64, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 152, 153, 154, 156, 157, 159, 160, 162, 163, 164, 165, 166, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 201, 205, 206, 208, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 253, 256, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289]|[1, 2, 3, 4, 8, 9, 10, 11, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 110, 111, 115, 116, 117, 118, 119, 120, 121, 126, 128, 129, 130, 131, 132, 133, 135, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 216, 217, 218, 220, 223, 224, 225, 228, 230, 231, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 267, 268, 270, 272, 274, 275, 276, 277, 278, 281, 282, 285, 287]");
        Assert.assertEquals(distributedRandomForestRes.getTreeId(), -1);
            }

    @Test
    public void jsonSerialize(){
        DistributedRandomForestRes distributedRandomForestRes = new DistributedRandomForestRes(new ClientInfo(), "test", true);
        Serializer jsonSerialize = new JsonSerializer();
        String res = jsonSerialize.serialize(distributedRandomForestRes);
        String realRes = "{\"CLASS\":\"com.jdt.fedlearn.core.entity.randomForest.DistributedRandomForestRes\",\"DATA\":{\"client\":{\"port\":0,\"uniqueId\":0},\"isActive\":true,\"body\":\"test\",\"treeId\":0,\"extraInfo\":\"\"}}";
        Assert.assertEquals(res, realRes);
    }


    @Test
    public void testParseJsonToJson() {
        String ori ="{\"client\":{\"ip\":\"127.0.0.1\",\"port\":8891,\"path\":null,\"protocol\":\"http\",\"uniqueId\":0},\"isActive\":true,\"body\":\"Cu8DCuwDCvMBCvAB5/+MkNdVVkAJYe5lbJBWQIc1i7/skVVA+fFCyodwVkCW5jzWbvVVQPh5S/h6JldAe327d4TfVkBl1bW68hFXQJ/uee2jkVdAq7mbdeEfVkBFFYHSyMpWQJFw4y00IFZAUIXPPlGMVkBXVbOWGA9XQNeiQAs8UFZAfYSHCBuTVkAHy/5FuMlWQG1E22tu9VZAOPfV63rDV0DlHDTJhylXQA3KQj/Om1dAiEROjrVIV0A3JdtO1/9WQDFRh+wN/VZAZRrnbS02V0DmwVsWIqFXQPY/+NEYw1dAA3U2NnRdWECSm2ZTZwtXQHLsH5kPvVdACvMBCvABN9MZYe0zVkD5crIO5axWQB0t94MItlVAMOKInBx9VkACupDV4/tVQBEsAf1FAFZA7+wGCghMVkBRVj0DyiVXQB17jjU53VVA+zHAiFc7VkCSv8gs7sdWQFU3OdgPQVZA+RrBdBabV0BuHtUh74hWQKtCwzHdQVdAEI421f9JV0DQ9b7jTUlXQPBQ/lCI6VZASzRNlED4VkDw6FKM5QFYQMrgWD1DUldA4MBJ0nM+V0AlYJ1VBttXQGkygrZ9G1hAm4hzLgdtV0DvMI1ar39XQFf+1ITYxldAqHxrqhdTV0DVuJoIO6JWQGr6JXqrnldACu8DCuwDCvMBCvABTO8PckKnVkCTSwP32HVWQMlPQnJ8rVZAJH2MKFohVkAvbcxQkL1VQA5+mEMFuldA8EF/11oAV0BhTYRqpEdXQNUBsJ49qlZAn2cYaB8aVkD+PrTkDU5WQAK7U3tDmFZA1+CH+ng0VkC3nFW7ir9WQD+Wq17SnFZAnHXHSFJpVkDzO8K/dcNWQP30tePhPVdA6KX/nsfiV0CmNDuCiWpXQMpHb3YnBFdAUKcSdIBRV0DzzwPfFcBWQJHU4CFCIldAF2HYjMAvV0Dxm2WB4aZXQHCrGZy351dAJ4C2PR9fV0DWR9aJmaxXQE6SjWb+JVdACvMBCvABjSCTjIxRVkAFUkyN4mFWQLbm9rV1wVVA2T4jcn49VkDn7ZSIfjFWQPBcIOOYDVZAYEn69G0QVkBSZBEaEUZWQMkoR2Ci8VVAQPPmivUuV0BFuwD8pXRWQMrFfqBbBVdA7VHUVFAnV0BjUr+HqvBWQMPGfU2t4lZAqCP1z7GrVkCnySTukthXQNNf3aLB/1ZAN2oE2tt0V0DhTth1Mx9XQFOWyqB6jldARUAXma35VkAID4VaaCdYQBn9tPsKAlhASIX1aTsDV0AGy7hbZMBXQD23XHkblFdAGx3yJrW8V0BnUyuSNrxWQMFXtwV/Y1dA\",\"sampleId\":null,\"treeId\":-1,\"extraInfo\":\"0|1||[0, 1, 4, 5, 7, 8, 9, 10, 12, 13, 15, 16, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 35, 36, 37, 38, 39, 40, 45, 46, 47, 48, 49, 51, 52, 54, 55, 57, 58, 59, 62, 63, 64, 67, 68, 69, 71, 73, 75, 76, 77, 78, 79, 82, 83, 84, 86, 87, 88, 89, 90, 93, 94, 95, 97, 98, 100, 101, 102, 103, 104, 107, 108, 109, 110, 111, 112, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 134, 135, 137, 138, 139, 140, 141, 142, 144, 145, 148, 149, 150, 152, 153, 154, 156, 157, 159, 160, 162, 163, 164, 165, 166, 169, 170, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 196, 197, 198, 201, 205, 206, 208, 210, 211, 212, 213, 214, 216, 218, 219, 220, 221, 222, 224, 226, 227, 228, 229, 230, 233, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 253, 256, 258, 259, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 281, 283, 285, 286, 287, 288, 289]|[1, 2, 3, 4, 8, 9, 10, 11, 15, 17, 18, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 102, 103, 104, 105, 107, 108, 110, 111, 115, 116, 117, 118, 119, 120, 121, 126, 128, 129, 130, 131, 132, 133, 135, 139, 140, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 153, 154, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 172, 175, 177, 178, 179, 180, 181, 182, 185, 186, 187, 190, 191, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 208, 209, 210, 211, 212, 213, 216, 217, 218, 220, 223, 224, 225, 228, 230, 231, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 259, 261, 262, 263, 264, 267, 268, 270, 272, 274, 275, 276, 277, 278, 281, 282, 285, 287]\",\"active\":true}";
        DistributedRandomForestRes distributedRandomForestRes = new DistributedRandomForestRes();
        distributedRandomForestRes.parseJson(ori);
        String res = distributedRandomForestRes.toJson();
        Assert.assertEquals(res,ori);
    }
}